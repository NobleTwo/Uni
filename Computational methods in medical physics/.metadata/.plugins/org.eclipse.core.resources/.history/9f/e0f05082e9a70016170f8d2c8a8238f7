#include <iostream>
#include <fstream>
#include <random>
#include <ctime>
#include <cmath>
#include <cfloat>

double samplingMethod(int numberOfSamples){
	int a=0;
	int b=1;
	double sum_f_x = 0;
	for(int i=0; i<numberOfSamples; i++){
		double x = double(rand())/RAND_MAX;
		//std::cout << x;
		sum_f_x += pow(cos(1./x),2);
	}
	return (b-a)*sum_f_x/numberOfSamples;
}

double hitOrMiss(int numberOfSamples){
	int a=0;
	int b=1;
	double max = 1;
	double I_known = (b-a)*max;
	int hit = 0;
	for(int i=0; i<numberOfSamples; i++){
		double x = double(rand())/RAND_MAX;
		double y = double(rand())/RAND_MAX;
		double f_x = pow(cos(1./x),2);
		if(y<= f_x){
			hit++;
		}
	}
	std::cout << hit << std::endl;
	return I_known*hit/numberOfSamples;
}

int main(){
	srand(time(NULL));

	std::ofstream file;
	file.open("values.txt");
	int runsForVariance = 10;
	for(int i=0; i<6; i++){
		int numberOfSamples = pow(10,i);
		double samplingMethod_mean = 0;
		double samplingMethod_min = DBL_MAX;
		double samplingMethod_max = -DBL_MAX;

		double hitOrMiss_mean = 0;
		double hitOrMiss_min = DBL_MAX;
		double hitOrMiss_max = -DBL_MAX;
		for(int j; j<runsForVariance; j++){
			double samp = samplingMethod(numberOfSamples);
			samplingMethod_mean += samp;
			if(samp<samplingMethod_min){
				samplingMethod_min = samp;
			}
			if(samp>samplingMethod_max){
				samplingMethod_max = samp;
			}

			double hOm = hitOrMiss(numberOfSamples);
			hitOrMiss_mean += hOm;
			if(hOm<hitOrMiss_min){
				hitOrMiss_min = hOm;
			}
			if(hOm>hitOrMiss_max){
				hitOrMiss_max = hOm;
			}
		}
		std::cout << numberOfSamples << "\t" << samplingMethod_mean/numberOfSamples << "\t" << samplingMethod_max-samplingMethod_min << "\t";
		file << numberOfSamples << "\t" << samplingMethod_mean/numberOfSamples << "\t" << samplingMethod_max-samplingMethod_min << "\t";
		std::cout << hitOrMiss << "\t" << hitOrMiss_max-hitOrMiss_min << "\t" << "0.326543" << std::endl;
		file << hitOrMiss << "\t" << hitOrMiss_max-hitOrMiss_min << "\t" << "0.326543" << std::endl;
	}
	file.close();
}
